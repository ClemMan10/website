---
import Contact from "../components/Contact.astro";

const DEFAULT_TITLE = "In the Pouchett (Recording studio, Live session, Mixing, Mastering)";
const DEFAULT_DESC = "In the Pouchett — studio d'enregistrement et Live Sessions à Paris : captation, mixage, mastering et production vidéo.";
const SITE_URL = "https://inthepouchett.com";
const SITE_NAME = "In the Pouchett";

export interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  image?: string;
  lang?: string;
}

const { title = DEFAULT_TITLE, description = DEFAULT_DESC, canonical = null, image = null, lang = 'fr' } = Astro.props as Props;

function toAbsoluteWithTrailing(pathOrUrl: string) {
  // If no path provided, return site root with trailing slash
  if (!pathOrUrl) return SITE_URL.endsWith('/') ? SITE_URL : SITE_URL + '/';
  try {
    const url = new URL(pathOrUrl, SITE_URL);
    let pathname = url.pathname;
    if (!pathname.endsWith('/')) pathname = pathname + '/';
    return `${url.protocol}//${url.host}${pathname}${url.search}${url.hash}`;
  } catch (e) {
    if (!pathOrUrl.startsWith('/')) pathOrUrl = `/${pathOrUrl}`;
    return toAbsoluteWithTrailing(pathOrUrl);
  }
}

const canonicalAbsolute = canonical ? toAbsoluteWithTrailing(canonical) : (SITE_URL.endsWith('/') ? SITE_URL : SITE_URL + '/');
---

<!doctype html>
<html lang={lang} class="has-navbar-fixed-top">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
    />

    <link rel="icon" type="image/png" href="/favicon/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon/favicon.svg" />
    <link rel="shortcut icon" href="/favicon/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="In the Pouchett" />
    <link rel="manifest" href="/favicon/site.webmanifest" />
    <!-- iOS web app meta (optionnel mais utile) -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

  <title>{title}</title>
  <meta name="description" content={description} />
  {canonical ? <link rel="canonical" href={canonicalAbsolute} /> : null}

    <!-- Open Graph -->
    <meta property="og:site_name" content={SITE_NAME} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
  <meta property="og:url" content={canonicalAbsolute} />
    {image ? <meta property="og:image" content={image} /> : null}

    <!-- Twitter Card -->
    <meta name="twitter:card" content={image ? "summary_large_image" : "summary"} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    {image ? <meta name="twitter:image" content={image} /> : null}

    <!-- JSON-LD Organization (basic) -->
    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "MusicOrganization",
        "name": SITE_NAME,
        "url": SITE_URL,
        "description": DEFAULT_DESC,
      })}
    </script>
  </head>

  <body>
    <slot name="navbar" />
    <main>
      <slot />
    </main>
    <Contact />

    <!-- Script d’animation au scroll -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const cards = document.querySelectorAll(".format-card");
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("is-visible");
              }
            });
          },
          { threshold: 0.2 }
        );
        cards.forEach((card) => observer.observe(card));
      });
    </script>
  </body>
</html>

<style is:global lang="scss">
  @use "bulma/sass/base";
  @use "bulma/sass/themes";
  @use "../styles/pattern.scss";

  /* --- Variables typographie --- */
  :root {
    --font-base: 1.25rem;          /* Texte normal */
    --font-card: 0.9rem;        /* Texte dans les cards */
    --font-h1: clamp(1.5rem, 4vw, 2.5rem);   /* h1 global */
    --font-h1-section: clamp(1.5rem, 5vw, 2rem); /* h1 sections */
    --font-h2: clamp(1.25rem, 3vw, 2rem);
    --font-h3: 1.2rem;
    --navbar-font: 1rem;
  }

  section h1 {
  margin-bottom: 1.5rem; /* réduit ou augmente selon besoin */
  }

  /* ✅ Ajustements mobile */
@media (max-width: 768px) {
  :root {
    --font-base: 1rem;   /* ≈16px au lieu de 20px */
    --font-card: 0.85rem;
    --font-h1: clamp(1.25rem, 6vw, 2rem);
    --font-h1-section: clamp(1.25rem, 6vw, 1.75rem);
    --font-h2: clamp(1.1rem, 4vw, 1.5rem);
    --font-h3: 1rem;
    --navbar-font: 0.9rem;
  }
}

  html, body {
    margin: 0;
    font-family: "Open Sans", sans-serif;
    font-size: var(--font-base);
    width: 100%;
  }
  html {
  scroll-behavior: smooth; /* optionnel mais agréable */
  scroll-padding-top: 4.5rem; /* hauteur navbar fixe */
  }

  nav { font-size: var(--navbar-font); }

  /* --- Sections --- */
  .filled, .pattern { padding: 2rem; }

  .filled {
    background-color: rgb(8, 15, 37);
    color: white;
    strong { font-weight: bold; color: inherit; }
  }

  .pattern { color: black; }

  /* --- Titres --- */
  h1 { font-size: var(--font-h1); text-transform: uppercase; text-align: center; }
  h1.filled, h1.pattern { font-size: var(--font-h1-section); } /* sections */
  h2 { font-size: var(--font-h2); }
  h3 { font-size: var(--font-h3); }

  .filled p, .filled li, .pattern p, .pattern li {
    font-size: var(--font-base);
  }

  /* --- Section Formats --- */
  .formats-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr;

    /* Téléphone en paysage (même si <768px) */
    @media (orientation: landscape) and (max-width: 1023px) {grid-template-columns: repeat(2, 1fr); }
    /* Tablettes ou mobiles un peu larges */
    @media (min-width: 640px) { grid-template-columns: repeat(2, 1fr); }
    /* PC */
    @media (min-width: 1024px) { grid-template-columns: repeat(3, 1fr); }
  }

  .format-card {
    background: white;
    border-radius: 0.75rem;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease, transform 0.6s ease;

    &:nth-child(1) { transition-delay: 0s; }
    &:nth-child(2) { transition-delay: 0.15s; }
    &:nth-child(3) { transition-delay: 0.3s; }

    &.is-visible { opacity: 1; transform: translateY(0); }

    .card-image img { width: 100%; height: auto; display: block; }

    .card-content {
      padding: 1rem;
      font-size: var(--font-card);
      color: black;

      h3 { font-size: var(--font-h3); margin-bottom: 0.5rem; }
      p  { font-size: var(--font-card); }
    }

    &:hover {
      transform: translateY(-8px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    }
  }

  section {
    display: grid;
    grid-template-columns: 1rem minmax(0, 1fr) 1rem;
    & > * { grid-column: 2; }

    @media (min-width: 768px) {
      grid-template-columns: minmax(1rem, 1fr) minmax(20rem, 3fr) minmax(1rem, 1fr);
    }
  }
  footer { width: 100%; }

  /* Réduire les marges du grid pour la section diffusion sur desktop */
  #diffusion, #formats {
    grid-template-columns: 0.5rem minmax(0, 1fr) 0.5rem;

    @media (min-width: 768px) {
      grid-template-columns: 0.5rem minmax(0, 3fr) 0.5rem;
    }
  }
</style>
